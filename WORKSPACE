git_repository(
    name = 'grpc',
    remote = 'https://github.com/grpc/grpc.git',
    commit = 'b14f6e6f61ea4a67f05a6c7e28ca1e6e5f01f445',
)

git_repository(
    name = 'protobuf',
    remote = 'https://github.com/google/protobuf.git',
    commit = 'e35e24800fb8d694bdeea5fd63dc7d1b14d68723',
)

bind(
    name = 'protobuf_compiler',
    actual = '@protobuf//:protoc_lib',
)

bind(
    name = 'protobuf_clib',
    actual = '@protobuf//:protobuf',
)

## TODO(korfuri): Use the real upstream (commented, below) insteead of
## mdsteele's boringssl-bazel. It's hard to use BoringSSL as it is
## because it doesn't provide a BUILD file and because a lot of its
## assembler code is autogenerated. mdsteele's fork has a checked-in
## version of the autogen'd code, which works around the issue. It
## should be possible to generate the .S files with a genrule instead.
new_git_repository(
    name = 'boringssl',
    remote = 'https://boringssl.googlesource.com/boringssl',
    commit = '82aa28fa81222a4a614ccf43fbc5b6e9bf02b588',
    build_file = 'BUILD.boringssl',
)

#load("/tools/build_rules/go/def", "go_repositories")
load("@bazel_tools//tools/build_rules/go:def.bzl", "go_repositories")
go_repositories()

# git_repository(
#     name = 'boringssl',
#     remote = 'https://github.com/mdsteele/boringssl-bazel.git',
#     commit = '436432d849b83ab90f18773e4ae1c7a8f148f48d',
#     init_submodules = True,
# )

bind(
    name = 'libssl',
    actual = '@boringssl//:ssl',
)

new_git_repository(
    name = 'zlib_repo',
    remote = 'https://github.com/madler/zlib.git',
    commit = '50893291621658f355bc5b4d450a8d06a563053d',
    build_file = 'BUILD.zlib',
)

bind(
    name = 'zlib',
    actual = '@zlib_repo//:zlib',
)
